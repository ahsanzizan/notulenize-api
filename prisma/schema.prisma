// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetings       Meeting[]
  uploadSessions UploadSession[]

  @@map("users")
}

model Meeting {
  id           String   @id @default(cuid())
  title        String
  audioFileUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  summary    Summary?
  transcript Transcript?

  @@map("meetings")
}

model Transcript {
  id        String   @id @default(cuid())
  fullText  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetingId String  @unique
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  chunks  TranscriptChunk[]
  summary Summary?

  @@map("transcripts")
}

model TranscriptChunk {
  id         String   @id @default(cuid())
  chunkIndex Int
  content    String   @db.Text
  createdAt  DateTime @default(now())

  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@unique([transcriptId, chunkIndex])
  @@map("transcript_chunks")
}

model UploadSession {
  id           String       @id @default(cuid())
  status       UploadStatus @default(IN_PROGRESS)
  filename     String?
  fileType     String?
  totalParts   Int?
  errorMessage String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("upload_sessions")
}

model Summary {
  id                String   @id @default(cuid())
  content           String
  keyPoints         String[]
  actionItems       String[]
  participants      String[]
  durationInMinutes Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  meetingId    String     @unique
  meeting      Meeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  transcriptId String     @unique
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@map("summaries")
}
